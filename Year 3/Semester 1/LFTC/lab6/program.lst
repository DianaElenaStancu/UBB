     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit
     5                                  import exit msvcrt.dll
     6                                  extern scanf
     7                                  import scanf msvcrt.dll
     8                                  extern printf
     9                                  import printf msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 256400                  	format db "%d", 0
    13 00000003 00<rept>                	 a times 4 db 0 
    14 00000007 00<rept>                	 b times 4 db 0 
    15 0000000B 00<rept>                	 temp1 times 4 db 0 
    16 0000000F 00<rept>                	 temp2 times 4 db 0 
    17 00000013 00<rept>                	 temp3 times 4 db 0 
    18 00000017 00<rept>                	 temp4 times 4 db 0 
    19 0000001B 00<rept>                	 temp5 times 4 db 0 
    20 0000001F 00<rept>                	 temp6 times 4 db 0 
    21                                  
    22                                  segment code use32 class=code
    23                                  	start:
    24 00000000 68[03000000]            		push dword a 
    25 00000005 68[00000000]            		push dword format 
    26 0000000A FF15[00000000]          		call [scanf] 
    27 00000010 83C408                  		add ESP, 4 * 2 
    28                                  
    29                                  
    30                                  
    31 00000013 B002                    		mov al, 2 
    32 00000015 B400                    		mov ah, 0 
    33 00000017 B205                    		mov dl, 5 
    34 00000019 F6E2                    		mul dl 
    35 0000001B A2[0B000000]            		mov [temp1], al 
    36                                  
    37 00000020 A0[03000000]            		mov al, [a] 
    38 00000025 0205[0B000000]          		add al, [temp1] 
    39 0000002B A2[0F000000]            		mov [temp2], al 
    40                                  
    41                                  
    42                                  
    43                                  
    44 00000030 A0[03000000]            		mov al, [a] 
    45 00000035 B400                    		mov ah, 0 
    46 00000037 B202                    		mov dl, 2 
    47 00000039 F6E2                    		mul dl 
    48 0000003B A2[13000000]            		mov [temp3], al 
    49                                  
    50 00000040 B00A                    		mov al, 10 
    51 00000042 0205[13000000]          		add al, [temp3] 
    52 00000048 A2[17000000]            		mov [temp4], al 
    53                                  
    54 0000004D A0[0F000000]            		mov al, [temp2] 
    55 00000052 0205[17000000]          		add al, [temp4] 
    56 00000058 A2[1B000000]            		mov [temp5], al 
    57 0000005D A0[1B000000]            		mov al, [temp5]
    58 00000062 A2[03000000]            		mov [a], al
    59                                  
    60                                  
    61 00000067 A0[03000000]            		mov al, [a] 
    62 0000006C 2C1A                    		sub al, 26 
    63 0000006E A2[1F000000]            		mov [temp6], al 
    64 00000073 A0[1F000000]            		mov al, [temp6]
    65 00000078 A2[07000000]            		mov [b], al
    66                                  
    67 0000007D FF35[07000000]          		push dword [b] 
    68 00000083 68[00000000]            		push dword format 
    69 00000088 FF15[00000000]          		call [printf] 
    70 0000008E 83C408                  		add ESP, 4 * 2 
    71                                  
    72 00000091 6A00                    		push dword 0
    73 00000093 FF15[00000000]          		call [exit]
